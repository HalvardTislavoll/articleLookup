#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Oct 27, 2024 11:46:55 AM CET  platform: Linux
#    Oct 27, 2024 02:45:22 PM CET  platform: Linux
#    Oct 27, 2024 10:04:07 PM CET  platform: Linux
#    Oct 27, 2024 10:48:38 PM CET  platform: Linux
#    Oct 29, 2024 11:34:09 AM CET  platform: Linux
#    Oct 30, 2024 07:14:18 PM CET  platform: Linux
#    Nov 05, 2024 05:03:10 PM CET  platform: Linux
#    Nov 15, 2024 08:59:52 PM CET  platform: Linux

"""
.............Author : Halvard Tislavoll, 2024
.....released under : MIT License
......GUI File Name : articlesLookup.py
............Purpose : a lookup for my weekly python articles
....file dependency : articlesLookup.py
.......projekt name : u_articlesLookup.zip
..date last updated : Oct 27, 2024
.the current status : I  (Completed or Incomplete)
............comment : onely for fun and learning

MIT License:   https://opensource.org/licenses/MIT

Copyright (c) [2024] [halvard.tislavoll@haugnett.no]
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import font
from tkinter import messagebox
from tkinter import StringVar

import articlesLookup
import mytoolkit as mtk
#from screeninfo import get_monitors

# ======================================================================
# HowTo create an empty module and import while running the script
# ======================================================================
import os
module_name = "shared"   # empty_module
# Create the empty module file
with open(f"{module_name}.py", "w") as file:
    pass  # This creates an empty file
# Check if the file exists before importing
if os.path.isfile(f"{module_name}.py"):
    import importlib.util
    spec = importlib.util.spec_from_file_location(module_name, f"{module_name}.py")
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
else:
    print(f"File '{module_name}.py' does not exist. Failed to import the module.")
sh=importlib   # sh is alias shared for short
import shared as sh
sh.module_name=f"{module_name}.py"
filename="shared.py"   # need a filename to erase the generated file at cleanup
setattr(sh, "sharedfilename", filename )   # assign a variable to the shared module
# ‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒
import datetime
from PIL import Image, ImageTk
import concurrent.futures
import urllib.request
import webbrowser

_debug = True # False to eliminate debug printing from callback functions.

"""ToDo:
        [ ] lag en logo/passord skjerm (splash screen)
        [x] lag en rutine for Remove Checkmark button                     
        [ ] lag en frm for webskraping med egen button i hamburger menyen #1
        [ ] lag en frm for valg av url mellom to lister                   #2
        [ ] laste dict fra .json ved oppstart og lagre ved avslutning
        [ ] vurder bruk av sqlite
"""
"""from articles_support:
        How to scrape the PyCoder's Weeklywebpage for articles?
        How to admin which articles to be saved in dict?
        - save them all -> adm by using two lists
        add button for select all and deselect all
        implement frame lifting and hamburger menu
        make code cleaner by making a populate func, ...
"""

# ######################################################################
#
#   Initiation Section
#
# ‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = articlesLookup.Toplevel1(_top1)
    startup()
    root.mainloop()

    
def startup():
    '''Function that starts my program'''
    _top1.wm_attributes("-zoomed", False)   # True = full screen size
    # set Global Variables
    sh._w = _w1
    sh._t = _top1
    sh.timer_id = root.after(0, mtk.on_time_update)   # set initial value for timer
    sh.decoration=80
    sh.actual_list = []
    # set Avatar Icon on Linux Menubar
    mtk.set_icon(_top1)
    # set proper title
    _top1.title("my PYCODER'S WEEKLY stuff")
    # set the Temtk.display_issues()rminal's Geometry on Display
    os.system('resize -s 38 110')   # Usage: resize [-v] [-u] [-c] [-s [rows cols]]
    print('‒'*sh.decoration)
    # set System, and Program Info in Terminal
    mtk.give_sysem_info(_top1, tk, _w1)
    # set widgets place, variables and bind method 
    mtk.init_widgets(_w1)
    # place Toplevel form on screen center
    mtk.place_toplevel(_top1, _w1)
    # set Hamburger menu state
    mtk.open_hamburger(_top1, _w1)
    # set frame levels lower
    mtk.set_lower(_w1)
    # make spalshscreenframe ready 
    mtk.set_splash_screen(_w1)
    # lift spalshscreenframe to show up on display
    _w1.frmStartupSplashScreen.lift()
    # set time display on statusbar label
    mtk.on_time_update()

# ######################################################################
#
#   Callback Section
#
# ‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒

'''
def on_TBtnSplashscreen(*args):
    if _debug:
        print('articlesLookup_support.on_TBtnSplashscreen')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
'''


def on_TBtnStart(*args):
    if _debug:
        print('articlesLookup_support.on_TBtnStart')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    mtk.set_lower(_w1)
    _w1.frmHome.lift()
    on_TBtnHome()


def on_Hamburger(*args):
    if _debug:
        print('configTest_support.on_Hamburger')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    # setup status label
    txt = 'This is the Hamburger menu'
    _w1.lblStatus.configure(text=txt)
    if sh.hamburgermenu==True:
        mtk.open_hamburger(_top1, _w1)
        _w1.TFrameMenu.lower()
    else:
        mtk.close_hamburger(_top1, _w1)
        _w1.TFrameMenu.lift()        


def on_TBtnHome(*args):
    if _debug:
        print('textboxLookup_support.on_TBtnHome')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    global _w1
    mtk.set_lower(_w1)
    mtk.open_hamburger(_top1, _w1)
    # set heading label
    _w1.TLabel3.configure(text='''Weekly Issues to look up articles from:''')
    # set status label
    _w1.lblStatus.configure(text='''Pick the Issue you want''')
    sh.URLS = []
    # hide widget when it is build with buttons
    _w1.Scrolledwindow1.place(x=2000)   # x=574
    # make a canvas with a dynamic frame holding buttons
    mtk.display_all_issues(_w1)
    _w1.frmHome.lift()


def on_TBtnCheckAll(*args):
    if _debug:
        print('articlesLookup_support.on_TBtnCheckAll')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()


def on_TBtnRemoveCheckmarks(*args):
    if _debug:
        print('articlesLookup_support.on_TBtnRemoveCheckmarks')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    mtk.toggle_all_checkboxes(False)


def on_TBtnBrowser(*args):
    if _debug:
        print('articlesLookup_support.on_TBtnBrowser')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

    if sh.URLS == []:
        print('\nSorry, no web pages have been selected\n')
    else:
        print('\nPlease wait while I load the web page ...\n')
        
        # We can use a with statement to ensure threads are cleaned up promptly
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            # Start the load operations and mark each future with its URL
            future_to_url = {executor.submit(mtk.load_url, url, 60): url for url in sh.URLS}
            for future in concurrent.futures.as_completed(future_to_url):
                url = future_to_url[future]
                # open a html-file in browser
                # webbrowser.open(url, new=2)   # by me   (new=0 in the same browser, new=1 in a new browser, new=3 in new tab)
                webbrowser.open_new_tab(url)    # by me
                try:
                    data = future.result()
                except Exception as exc:
                    print('%r generated an exception: %s' % (url, exc))
                else:
                    print('%r page is %d bytes' % (url, len(data)))


def on_TBtnPreferences(*args):
    if _debug:
        print('textboxLookup_support.on_TBtnPreferences')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    # close hamburger menu, set previous frame lower and lift current frame
    mtk.set_lower(_w1)
    mtk.open_hamburger(_top1, _w1)
    _w1.frmPreferences.lift()


def on_TBtnAbout(*args):
    if _debug:
        print('textboxLookup_support.on_TBtnAbout')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    mtk.close_hamburger(_top1, _w1)
    mtk.set_lower(_w1)
    mtk.open_hamburger(_top1, _w1)
    _w1.TfrmAbout.lift()


def on_TBtnHelp(*args):
    if _debug:
        print('textboxLookup_support.on_TBtnHelp')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    mtk.close_hamburger(_top1, _w1)
    mtk.set_lower(_w1)
    mtk.open_hamburger(_top1, _w1)
    head="\tHow to ..."
    _w1.TLabel3.configure(text=head, justify='center')
    mtk.populate_help()
    _w1.TfrmHelp.lift()

def on_TBtnDismiss(*args):
    if _debug:
        print('textboxLookup_support.on_TBtnDismiss')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    global _w1
    mtk.set_lower(_w1)
    mtk.open_hamburger(_top1, _w1)
    # set heading label
    _w1.TLabel3.configure(text='''Weekly Issues to look up articles from:''')
    # set status label
    _w1.lblStatus.configure(text='''Pick the Issue you want''')
    sh.URLS = []
    # hide widget when it is build with buttons
    _w1.Scrolledwindow1.place(x=2000)   # x=574
    # make a canvas with a dynamic frame holding buttons
    mtk.display_all_issues(_w1)
    _w1.frmHome.lift()


def on_TBtnEditCopy(*args):
    if _debug:
        print('articlesLookup_support.on_TBtnEditCopy')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    on_Hamburger()
    mtk.set_lower(_w1)
    _w1.frmMoveBetweenLists.lift()


def on_TBtnListAdd(*args):
    if _debug:
        print('articlesLookup_support.on_TBtnListAdd')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    on_Hamburger()
    mtk.set_lower(_w1)
    _w1.frmAddIssues.lift()
    mtk.display_issues()


def on_TBtnGo1(*args):   # on new issues reg
    if _debug:
        print('articlesLookup_support.on_TBtnGo1')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    mtk.handle_entry(_w1)


def on_TBtnExit(*args):
    if _debug:
        print('Callback section --> on_TBtExit()')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    mtk.cleanUp()
    sys.exit()


# ######################################################################
#
#   Main Program
#
# ‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒‒


if __name__ == '__main__':
    articlesLookup.start_up()
