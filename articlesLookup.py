#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Nov 18, 2024 09:45:39 AM CET  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import articlesLookup_support

_bgcolor = '#919191'
_fgcolor = 'black'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: articlesLookup_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'notsodark.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('notsodark')
    style.configure('.', font = "TkDefaultFont")
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("930x607+393+111")
        top.minsize(1, 1)
        top.maxsize(3825, 1050)
        top.resizable(0,  0)
        top.title("Toplevel 0")
        top.configure(borderwidth="2")
        top.configure(background="#919191")
        top.configure(highlightbackground="gray82")
        top.configure(highlightcolor="black")

        self.top = top
        self.StatusTime = tk.StringVar()

        _style_code()
        self.TfrmStatus = ttk.Frame(self.top)
        self.TfrmStatus.place(x=5, y=520, height=52, width=920)
        self.TfrmStatus.configure(relief='sunken')
        self.TfrmStatus.configure(borderwidth="2")
        self.TfrmStatus.configure(relief="sunken")

        self.lblStatus = ttk.Label(self.TfrmStatus)
        self.lblStatus.place(x=190, y=5, height=40, width=555)
        self.lblStatus.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.lblStatus.configure(relief="flat")
        self.lblStatus.configure(anchor='center')
        self.lblStatus.configure(justify='left')
        self.lblStatus.configure(text='''Status''')
        self.lblStatus.configure(compound='left')

        self.TLabel9 = ttk.Label(self.TfrmStatus)
        self.TLabel9.place(x=10, y=5, height=40, width=63)
        self.TLabel9.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel9.configure(relief="flat")
        self.TLabel9.configure(anchor='w')
        self.TLabel9.configure(justify='left')
        self.TLabel9.configure(text='''Runtime:''')
        self.TLabel9.configure(compound='left')

        self.TLabel2 = ttk.Label(self.TfrmStatus)
        self.TLabel2.place(x=80, y=5, height=40, width=94)
        self.TLabel2.configure(font="-family {DejaVu Sans} -size 14 -weight bold")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='w')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(textvariable=self.StatusTime)
        self.StatusTime.set('''''')
        self.TLabel2.configure(compound='left')

        self.TfrmAbout = ttk.Frame(self.top)
        self.TfrmAbout.place(x=0, y=49, height=470, width=926)
        self.TfrmAbout.configure(relief='flat')
        self.TfrmAbout.configure(borderwidth="2")
        self.TfrmAbout.configure(relief="flat")

        self.TLabel4_1 = ttk.Label(self.TfrmAbout)
        self.TLabel4_1.place(x=10, y=20, height=21, width=904)
        self.TLabel4_1.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel4_1.configure(relief="flat")
        self.TLabel4_1.configure(anchor='center')
        self.TLabel4_1.configure(justify='left')
        self.TLabel4_1.configure(text='''on About screen''')
        self.TLabel4_1.configure(compound='left')

        self.Message2 = tk.Message(self.TfrmAbout)
        self.Message2.place(x=40, y=60, height=371, width=842)
        self.Message2.configure(background="#919191")
        self.Message2.configure(font="-family {DejaVu Sans} -size 10")
        self.Message2.configure(highlightbackground="#919191")
        self.Message2.configure(padx="1")
        self.Message2.configure(pady="1")
        self.Message2.configure(text='''Program utvikla av Halvard''')
        self.Message2.configure(width=842)

        self.TBtnDismiss_1 = ttk.Button(self.TfrmAbout)
        self.TBtnDismiss_1.place(x=415, y=420, height=40, width=98)
        self.TBtnDismiss_1.configure(command=articlesLookup_support.on_TBtnDismiss)
        self.TBtnDismiss_1.configure(text='''Dismiss''')
        self.TBtnDismiss_1.configure(compound='left')

        self.frmMoveBetweenLists = tk.Frame(self.top)
        self.frmMoveBetweenLists.place(x=0, y=49, height=470, width=926)
        self.frmMoveBetweenLists.configure(relief='flat')
        self.frmMoveBetweenLists.configure(borderwidth="2")
        self.frmMoveBetweenLists.configure(background="#919191")
        self.frmMoveBetweenLists.configure(highlightbackground="gray82")

        self.TBtnDismiss_1_1_1_1 = ttk.Button(self.frmMoveBetweenLists)
        self.TBtnDismiss_1_1_1_1.place(x=414, y=417, height=40, width=98)
        self.TBtnDismiss_1_1_1_1.configure(command=articlesLookup_support.on_TBtnDismiss)
        self.TBtnDismiss_1_1_1_1.configure(text='''Dismiss''')
        self.TBtnDismiss_1_1_1_1.configure(compound='left')

        self.Scrolledlistbox2 = ScrolledListBox(self.frmMoveBetweenLists)
        self.Scrolledlistbox2.place(x=503, y=10, height=398, width=418)
        self.Scrolledlistbox2.configure(background="white")
        self.Scrolledlistbox2.configure(cursor="xterm")
        self.Scrolledlistbox2.configure(disabledforeground="#6d6d6d")
        self.Scrolledlistbox2.configure(font="TkFixedFont")
        self.Scrolledlistbox2.configure(highlightbackground="#919191")
        self.Scrolledlistbox2.configure(highlightcolor="#919191")
        self.Scrolledlistbox2.configure(selectbackground="#d9d9d9")

        self.Scrolledlistbox1 = ScrolledListBox(self.frmMoveBetweenLists)
        self.Scrolledlistbox1.place(x=5, y=10, height=398, width=418)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(cursor="xterm")
        self.Scrolledlistbox1.configure(disabledforeground="#6d6d6d")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(highlightbackground="#919191")
        self.Scrolledlistbox1.configure(highlightcolor="#919191")
        self.Scrolledlistbox1.configure(selectbackground="#d9d9d9")

        self.TLabel4_2_1 = ttk.Label(self.frmMoveBetweenLists)
        self.TLabel4_2_1.place(x=330, y=10, height=21, width=274)
        self.TLabel4_2_1.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel4_2_1.configure(relief="flat")
        self.TLabel4_2_1.configure(anchor='center')
        self.TLabel4_2_1.configure(justify='left')
        self.TLabel4_2_1.configure(text='''on Move Between Lists screen''')
        self.TLabel4_2_1.configure(compound='left')

        self.TfrmHeader = tk.Frame(self.top)
        self.TfrmHeader.place(x=0, y=0, height=49, width=930)
        self.TfrmHeader.configure(relief='ridge')
        self.TfrmHeader.configure(borderwidth="2")
        self.TfrmHeader.configure(relief="ridge")
        self.TfrmHeader.configure(background="#919191")
        self.TfrmHeader.configure(highlightbackground="gray82")

        self.TBtnExit = ttk.Button(self.TfrmHeader)
        self.TBtnExit.place(x=885, y=2, height=40, width=38)
        self.TBtnExit.configure(command=articlesLookup_support.on_TBtnExit)
        self.TBtnExit.configure(text='''Exit''')
        photo_location = os.path.join(_location,"./assets/graphic/system-shutdown.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.TBtnExit.configure(image=_img0)
        self.TBtnExit.configure(compound='none')
        self.TBtnExit_tooltip = \
        ToolTip(self.TBtnExit, '''Shutdown''')

        self.TLblHamburger = ttk.Label(self.TfrmHeader)
        self.TLblHamburger.place(x=1, y=2, height=40, width=38)
        self.TLblHamburger.configure(font="-family {DejaVu Sans} -size 10")
        self.TLblHamburger.configure(relief="raised")
        self.TLblHamburger.configure(anchor='center')
        self.TLblHamburger.configure(justify='left')
        self.TLblHamburger.configure(text='''h''')
        self.TLblHamburger.configure(compound='none')
        self.TLblHamburger.bind('<Button-1>',lambda e:articlesLookup_support.on_Hamburger(e))

        self.TFrame3 = ttk.Frame(self.TfrmHeader)
        self.TFrame3.place(x=773, y=0, height=45, width=80)
        self.TFrame3.configure(relief='flat')
        self.TFrame3.configure(borderwidth="1")
        self.TFrame3.configure(relief="flat")

        self.TBtnHelp = ttk.Button(self.TFrame3)
        self.TBtnHelp.place(x=0, y=0, height=40, width=38)
        self.TBtnHelp.configure(command=articlesLookup_support.on_TBtnHelp)
        self.TBtnHelp.configure(text='''Help''')
        photo_location = os.path.join(_location,"./assets/graphic/question.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.TBtnHelp.configure(image=_img1)
        self.TBtnHelp.configure(compound='none')
        self.TBtnHelp_tooltip = \
        ToolTip(self.TBtnHelp, '''Help''')

        self.TBtnAbout = ttk.Button(self.TFrame3)
        self.TBtnAbout.place(x=38, y=0, height=40, width=38)
        self.TBtnAbout.configure(command=articlesLookup_support.on_TBtnAbout)
        self.TBtnAbout.configure(text='''About''')
        photo_location = os.path.join(_location,"./assets/graphic/information.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.TBtnAbout.configure(image=_img2)
        self.TBtnAbout.configure(compound='none')
        self.TBtnAbout_tooltip = \
        ToolTip(self.TBtnAbout, '''About''')

        self.TLabel3 = tk.Label(self.TfrmHeader)
        self.TLabel3.place(x=160, y=2, height=38, width=610)
        self.TLabel3.configure(activebackground="#d9d9d9")
        self.TLabel3.configure(anchor='w')
        self.TLabel3.configure(background="#919191")
        self.TLabel3.configure(compound='left')
        self.TLabel3.configure(disabledforeground="#9d9d9d")
        self.TLabel3.configure(font="-family {DejaVu Sans} -size 20 -weight bold")
        self.TLabel3.configure(highlightbackground="gray82")
        self.TLabel3.configure(text='''Articles Lookup''')

        self.TFrameMenu = ttk.Frame(self.top)
        self.TFrameMenu.place(x=0, y=50, height=405, width=155)
        self.TFrameMenu.configure(relief='flat')
        self.TFrameMenu.configure(borderwidth="1")
        self.TFrameMenu.configure(relief="flat")

        self.TBtnHome = ttk.Button(self.TFrameMenu)
        self.TBtnHome.place(x=0, y=0, height=40, width=150)
        self.TBtnHome.configure(command=articlesLookup_support.on_TBtnHome)
        self.TBtnHome.configure(text='''Home''')
        photo_location = os.path.join(_location,"./assets/graphic/home.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.TBtnHome.configure(image=_img3)
        self.TBtnHome.configure(compound='left')
        self.TBtnHome_tooltip = \
        ToolTip(self.TBtnHome, '''Home''')

        self.TBtnEditCopy = ttk.Button(self.TFrameMenu)
        self.TBtnEditCopy.place(x=0, y=90, height=40, width=150)
        self.TBtnEditCopy.configure(command=articlesLookup_support.on_TBtnEditCopy)
        self.TBtnEditCopy.configure(text='''Edit Items''')
        photo_location = os.path.join(_location,"./assets/graphic/edit-copy.png")
        global _img4
        _img4 = tk.PhotoImage(file=photo_location)
        self.TBtnEditCopy.configure(image=_img4)
        self.TBtnEditCopy.configure(compound='left')
        self.TBtnEditCopy_tooltip = \
        ToolTip(self.TBtnEditCopy, '''Edit or copy items between lists''')

        self.TBtnListAdd = ttk.Button(self.TFrameMenu)
        self.TBtnListAdd.place(x=0, y=45, height=40, width=150)
        self.TBtnListAdd.configure(command=articlesLookup_support.on_TBtnListAdd)
        self.TBtnListAdd.configure(text='''Add a Issue''')
        photo_location = os.path.join(_location,"./assets/graphic/list-add.png")
        global _img5
        _img5 = tk.PhotoImage(file=photo_location)
        self.TBtnListAdd.configure(image=_img5)
        self.TBtnListAdd.configure(compound='left')
        self.TBtnListAdd_tooltip = \
        ToolTip(self.TBtnListAdd, '''Add new item to list''')

        self.TBtnPreferences = ttk.Button(self.TFrameMenu)
        self.TBtnPreferences.place(x=0, y=135, height=40, width=150)
        self.TBtnPreferences.configure(command=articlesLookup_support.on_TBtnPreferences)
        self.TBtnPreferences.configure(text='''Preferences''')
        photo_location = os.path.join(_location,"./assets/graphic/applications-system.png")
        global _img6
        _img6 = tk.PhotoImage(file=photo_location)
        self.TBtnPreferences.configure(image=_img6)
        self.TBtnPreferences.configure(compound='left')
        self.TBtnPreferences_tooltip = \
        ToolTip(self.TBtnPreferences, '''Set Preferences''')

        self.frmStartupSplashScreen = tk.Frame(self.top)
        self.frmStartupSplashScreen.place(x=0, y=0, height=574, width=930)
        self.frmStartupSplashScreen.configure(relief='flat')
        self.frmStartupSplashScreen.configure(borderwidth="2")
        self.frmStartupSplashScreen.configure(background="#919191")
        self.frmStartupSplashScreen.configure(highlightbackground="gray82")

        self.TBtnStart = ttk.Button(self.frmStartupSplashScreen)
        self.TBtnStart.place(x=416, y=513, height=40, width=98)
        self.TBtnStart.configure(command=articlesLookup_support.on_TBtnStart)
        self.TBtnStart.configure(text='''Start''')
        self.TBtnStart.configure(compound='left')
        self.TBtnStart_tooltip = \
        ToolTip(self.TBtnStart, '''Start this application''')

        self.TLblFac_simile = ttk.Label(self.frmStartupSplashScreen)
        self.TLblFac_simile.place(x=314, y=32, height=460, width=597)
        self.TLblFac_simile.configure(font="-family {DejaVu Sans} -size 10")
        self.TLblFac_simile.configure(relief="flat")
        self.TLblFac_simile.configure(anchor='w')
        self.TLblFac_simile.configure(justify='left')
        self.TLblFac_simile.configure(text='''Tlabel''')
        self.TLblFac_simile.configure(compound='left')

        self.TLblIntro = ttk.Label(self.frmStartupSplashScreen)
        self.TLblIntro.place(x=2, y=19, height=511, width=295)
        self.TLblIntro.configure(font="-family {DejaVu Serif} -size 14")
        self.TLblIntro.configure(relief="flat")
        self.TLblIntro.configure(anchor='w')
        self.TLblIntro.configure(justify='left')
        self.TLblIntro.configure(text='''Tlabel''')
        self.TLblIntro.configure(compound='left')

        self.frmHome = tk.Frame(self.top)
        self.frmHome.place(x=0, y=50, height=470, width=926)
        self.frmHome.configure(relief='flat')
        self.frmHome.configure(borderwidth="2")
        self.frmHome.configure(background="#919191")
        self.frmHome.configure(highlightbackground="gray82")

        self.TLabel10 = ttk.Label(self.frmHome)
        self.TLabel10.place(x=563, y=160, height=81, width=154)
        self.TLabel10.configure(font="-family {DejaVu Sans} -size 14")
        self.TLabel10.configure(relief="flat")
        self.TLabel10.configure(anchor='center')
        self.TLabel10.configure(justify='left')
        self.TLabel10.configure(text='''Pleas wait ...''')
        self.TLabel10.configure(compound='left')

        self.TLblAboutWeeklyList = ttk.Label(self.frmHome)
        self.TLblAboutWeeklyList.place(x=170, y=0, height=454, width=374)
        self.TLblAboutWeeklyList.configure(font="-family {DejaVu Sans} -size 14")
        self.TLblAboutWeeklyList.configure(relief="flat")
        self.TLblAboutWeeklyList.configure(anchor='center')
        self.TLblAboutWeeklyList.configure(justify='left')
        self.TLblAboutWeeklyList.configure(text='''Tlabel''')
        self.TLblAboutWeeklyList.configure(compound='left')

        self.Scrolledwindow1 = ScrolledWindow(self.frmHome)
        self.Scrolledwindow1.place(x=574, y=0, height=454, width=184)
        self.Scrolledwindow1.configure(background="white")
        self.Scrolledwindow1.configure(borderwidth="2")
        self.Scrolledwindow1.configure(highlightbackground="#919191")
        self.Scrolledwindow1.configure(relief="groove")
        self.Scrolledwindow1.configure(selectbackground="#d9d9d9")
        self.color = self.Scrolledwindow1.cget("background")
        self.Scrolledwindow1_f = tk.Frame(self.Scrolledwindow1,
                            background=self.color)
        self.Scrolledwindow1.create_window(0, 0, anchor='nw',
                                           window=self.Scrolledwindow1_f)

        self.frmAddIssues = tk.Frame(self.top)
        self.frmAddIssues.place(x=0, y=50, height=470, width=926)
        self.frmAddIssues.configure(relief='flat')
        self.frmAddIssues.configure(borderwidth="2")
        self.frmAddIssues.configure(background="#919191")
        self.frmAddIssues.configure(highlightbackground="gray82")

        self.TBtnDismiss_1_1_1 = ttk.Button(self.frmAddIssues)
        self.TBtnDismiss_1_1_1.place(x=418, y=420, height=40, width=98)
        self.TBtnDismiss_1_1_1.configure(command=articlesLookup_support.on_TBtnDismiss)
        self.TBtnDismiss_1_1_1.configure(text='''Dismiss''')
        self.TBtnDismiss_1_1_1.configure(compound='left')

        self.TLabel5 = ttk.Label(self.frmAddIssues)
        self.TLabel5.place(x=60, y=48, height=21, width=251)
        self.TLabel5.configure(font="-family {DejaVu Sans} -size 12")
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor='w')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(compound='left')

        self.TEntry2 = ttk.Entry(self.frmAddIssues)
        self.TEntry2.place(x=609, y=44, height=30, width=120)
        self.TEntry2.configure(font="-family {DejaVu Sans} -size 10")
        self.TEntry2.configure(justify='center')
        self.TEntry2.configure(cursor="xterm")

        self.TLabel8 = ttk.Label(self.frmAddIssues)
        self.TLabel8.place(x=621, y=2, height=41, width=105)
        self.TLabel8.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel8.configure(relief="flat")
        self.TLabel8.configure(anchor='center')
        self.TLabel8.configure(justify='left')
        self.TLabel8.configure(text='''for example:
Oct. 29, 2024''')
        self.TLabel8.configure(compound='left')

        self.TLabel7 = ttk.Label(self.frmAddIssues)
        self.TLabel7.place(x=530, y=20, height=21, width=64)
        self.TLabel7.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(anchor='w')
        self.TLabel7.configure(justify='left')
        self.TLabel7.configure(text='''1 .. 653''')
        self.TLabel7.configure(compound='left')

        self.ScrolledlistboxUrl = ScrolledListBox(self.frmAddIssues)
        self.ScrolledlistboxUrl.place(x=28, y=88, height=318, width=878)
        self.ScrolledlistboxUrl.configure(background="white")
        self.ScrolledlistboxUrl.configure(cursor="xterm")
        self.ScrolledlistboxUrl.configure(disabledforeground="#6d6d6d")
        self.ScrolledlistboxUrl.configure(font="TkFixedFont")
        self.ScrolledlistboxUrl.configure(highlightbackground="#919191")
        self.ScrolledlistboxUrl.configure(highlightcolor="#919191")
        self.ScrolledlistboxUrl.configure(selectbackground="#d9d9d9")

        self.TLabel6 = ttk.Label(self.frmAddIssues)
        self.TLabel6.place(x=311, y=48, height=21, width=221)
        self.TLabel6.configure(font="-family {DejaVu Sans} -size 12")
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(anchor='w')
        self.TLabel6.configure(justify='left')
        self.TLabel6.configure(text='''+ actual issue number:   #''')
        self.TLabel6.configure(compound='left')

        self.TEntry1 = ttk.Entry(self.frmAddIssues)
        self.TEntry1.place(x=534, y=44, height=30, width=46)
        self.TEntry1.configure(font="-family {DejaVu Sans} -size 10")
        self.TEntry1.configure(justify='center')
        self.TEntry1.configure(cursor="fleur")

        self.TLabel1 = ttk.Label(self.frmAddIssues)
        self.TLabel1.place(x=30, y=20, height=21, width=265)
        self.TLabel1.configure(font="-family {DejaVu Sans} -size 12")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Read url from a pycoders issue:''')
        self.TLabel1.configure(compound='left')

        self.TLbl_warning = ttk.Label(self.frmAddIssues)
        self.TLbl_warning.place(x=116, y=157, height=193, width=697)
        self.TLbl_warning.configure(font="-family {DejaVu Sans} -size 20 -weight bold")
        self.TLbl_warning.configure(relief="flat")
        self.TLbl_warning.configure(anchor='center')
        self.TLbl_warning.configure(justify='left')
        self.TLbl_warning.configure(text='''TLabel''')
        self.TLbl_warning.configure(compound='left')

        self.TBtnGo1 = ttk.Button(self.frmAddIssues)
        self.TBtnGo1.place(x=760, y=44, height=30, width=48)
        self.TBtnGo1.configure(command=articlesLookup_support.on_TBtnGo1)
        self.TBtnGo1.configure(text='''go''')
        self.TBtnGo1.configure(compound='left')
        self.TBtnGo1_tooltip = \
        ToolTip(self.TBtnGo1, '''read the entrybox value and start web scraping''')

        self.frmArticles = tk.Frame(self.top)
        self.frmArticles.place(x=0, y=49, height=470, width=930)
        self.frmArticles.configure(relief='flat')
        self.frmArticles.configure(borderwidth="2")
        self.frmArticles.configure(background="#919191")
        self.frmArticles.configure(highlightbackground="gray82")

        self.Frame1 = tk.Frame(self.frmArticles)
        self.Frame1.place(x=0, y=0, height=470, width=925)
        self.Frame1.configure(background="#919191")
        self.Frame1.configure(highlightbackground="#919191")

        self.Scrolledtreeview1 = ScrolledTreeView(self.Frame1)
        self.Scrolledtreeview1.place(x=3, y=0, height=407, width=922)
        self.Scrolledtreeview1.configure(columns="Col1")
        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0",text="chk")
        self.Scrolledtreeview1.heading("#0",anchor="center")
        self.Scrolledtreeview1.column("#0",width="171")
        self.Scrolledtreeview1.column("#0",minwidth="5")
        self.Scrolledtreeview1.column("#0",stretch="1")
        self.Scrolledtreeview1.column("#0",anchor="center")
        self.Scrolledtreeview1.heading("Col1",text="Url")
        self.Scrolledtreeview1.heading("Col1",anchor="center")
        self.Scrolledtreeview1.column("Col1",width="733")
        self.Scrolledtreeview1.column("Col1",minwidth="20")
        self.Scrolledtreeview1.column("Col1",stretch="1")
        self.Scrolledtreeview1.column("Col1",anchor="w")

        self.TBtnBrowser = ttk.Button(self.Frame1)
        self.TBtnBrowser.place(x=321, y=420, height=40, width=280)
        self.TBtnBrowser.configure(command=articlesLookup_support.on_TBtnBrowser)
        self.TBtnBrowser.configure(text='''View selected items in your Browser''')
        self.TBtnBrowser.configure(compound='left')

        self.TBtnRemoveCheckmarks = ttk.Button(self.Frame1)
        self.TBtnRemoveCheckmarks.place(x=121, y=420, height=40, width=180)
        self.TBtnRemoveCheckmarks.configure(command=articlesLookup_support.on_TBtnRemoveCheckmarks)
        self.TBtnRemoveCheckmarks.configure(text='''Remove Checkmarks''')
        self.TBtnRemoveCheckmarks.configure(compound='left')

        self.TBtnCheckAll = ttk.Button(self.Frame1)
        self.TBtnCheckAll.place(x=3, y=420, height=40, width=98)
        self.TBtnCheckAll.configure(command=articlesLookup_support.on_TBtnCheckAll)
        self.TBtnCheckAll.configure(text='''Check All''')
        self.TBtnCheckAll.configure(compound='left')

        self.frmPreferences = tk.Frame(self.top)
        self.frmPreferences.place(x=0, y=49, height=470, width=926)
        self.frmPreferences.configure(relief='flat')
        self.frmPreferences.configure(borderwidth="2")
        self.frmPreferences.configure(background="#919191")
        self.frmPreferences.configure(highlightbackground="gray82")

        self.TLabel4 = ttk.Label(self.frmPreferences)
        self.TLabel4.place(x=330, y=10, height=21, width=274)
        self.TLabel4.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='center')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''on Preferences screen''')
        self.TLabel4.configure(compound='left')

        self.LblName = tk.Label(self.frmPreferences)
        self.LblName.place(x=10, y=40, height=21, width=229)
        self.LblName.configure(activebackground="#d9d9d9")
        self.LblName.configure(anchor='w')
        self.LblName.configure(background="#919191")
        self.LblName.configure(compound='left')
        self.LblName.configure(disabledforeground="#9d9d9d")
        self.LblName.configure(font="-family {DejaVu Sans} -size 10")
        self.LblName.configure(highlightbackground="gray82")
        self.LblName.configure(text='''Label''')

        self.LblResolution = tk.Label(self.frmPreferences)
        self.LblResolution.place(x=10, y=70, height=21, width=229)
        self.LblResolution.configure(activebackground="#d9d9d9")
        self.LblResolution.configure(anchor='w')
        self.LblResolution.configure(background="#919191")
        self.LblResolution.configure(compound='left')
        self.LblResolution.configure(disabledforeground="#9d9d9d")
        self.LblResolution.configure(font="-family {DejaVu Sans} -size 10")
        self.LblResolution.configure(highlightbackground="gray82")
        self.LblResolution.configure(text='''Label''')

        self.TBtnDismiss_1_1 = ttk.Button(self.frmPreferences)
        self.TBtnDismiss_1_1.place(x=415, y=420, height=40, width=98)
        self.TBtnDismiss_1_1.configure(command=articlesLookup_support.on_TBtnDismiss)
        self.TBtnDismiss_1_1.configure(text='''Dismiss''')
        self.TBtnDismiss_1_1.configure(compound='left')

        self.LblPosition = tk.Label(self.frmPreferences)
        self.LblPosition.place(x=10, y=110, height=21, width=229)
        self.LblPosition.configure(activebackground="#d9d9d9")
        self.LblPosition.configure(anchor='w')
        self.LblPosition.configure(background="#919191")
        self.LblPosition.configure(compound='left')
        self.LblPosition.configure(disabledforeground="#9d9d9d")
        self.LblPosition.configure(font="-family {DejaVu Sans} -size 10")
        self.LblPosition.configure(highlightbackground="gray82")
        self.LblPosition.configure(text='''Label''')

        self.TfrmHelp = ttk.Frame(self.top)
        self.TfrmHelp.place(x=0, y=49, height=470, width=926)
        self.TfrmHelp.configure(relief='flat')
        self.TfrmHelp.configure(borderwidth="2")
        self.TfrmHelp.configure(relief="flat")

        self.TBtnDismiss = ttk.Button(self.TfrmHelp)
        self.TBtnDismiss.place(x=412, y=419, height=40, width=98)
        self.TBtnDismiss.configure(command=articlesLookup_support.on_TBtnDismiss)
        self.TBtnDismiss.configure(text='''Dismiss''')
        self.TBtnDismiss.configure(compound='left')

        self.Scrolledtext1 = ScrolledText(self.TfrmHelp)
        self.Scrolledtext1.place(x=0, y=0, height=411, width=926)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(highlightbackground="#919191")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#d9d9d9")
        self.Scrolledtext1.configure(wrap="none")

from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkDefaultFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

class ScrolledWindow(AutoScroll, tk.Canvas):
    '''A standard Tkinter Canvas widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Canvas.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    articlesLookup_support.main()

if __name__ == '__main__':
    articlesLookup_support.main()




